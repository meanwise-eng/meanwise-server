====
Post
====

Post Search
===========

The post search API is used by the explore screen.

Request
-------

.. code-block:: http

   GET api/v1.1/search/post/ HTTP/1.1
   Host: api.meanwise.com
   Accept: application/json
   Content-Type: application/json
   Authorization: Token {token}

Also available at `apiv1.1/post/explore/`.

Query Parameters
----------------

..  list-table::
    :header-rows: 1

    * - Fieldname
      - Description
    * - interest_name
      - The name of the interest to filter by.
    * - tag_names
      - A tag name that you want to filter by.
    * - topic_texts
      - A topic text that you want to filter by.
    * - after
      - A timestamp added by forward pagination url. Tells the server to get results after this time.
    * - before
      - A timestamp added by backward pagination url. Tells the server to get results before this time.

Response Payload (JSON)
-----------------------

.. code-block:: http

  HTTP/1.1 200 OK
  Content-Type: application/json

.. code-block:: javascript

  {
    "backward": "http://localhost:8000/api/v4/posts/explore/?interest_name=%5B%27Fashion+%26+Beauty%27%5D&before=1498592941868",
    "forward": "http://localhost:8000/api/v4/posts/explore/?interest_name=%5B%27Fashion+%26+Beauty%27%5D&after=1501847983555",
    "count": 90,
    "error": "",
    "previous": "http://localhost:8000/api/v4/posts/explore/?interest_name=%5B%27Fashion+%26+Beauty%27%5D&after=1501847983555",
    "next": "http://localhost:8000/api/v4/posts/explore/?interest_name=%5B%27Fashion+%26+Beauty%27%5D&before=1498592941868",
    "status": "success",
    "results": [
      {
        "tags": [
          "music",
          "flute"
        ],
        "user_id": 38,
        "post_type": "video",
        "num_likes": 0,
        "num_comments": 0,
        "interest_id": 2,
        "user_firstname": "John",
        "user_lastname": "Doe",
        "user_profile_photo": "http://localhost:8001/media/profile_photos/2017-04-26.jpg",
        "user_profile_photo_small": "http://localhost:8001/media/profile_photo_thumbs/2017-04-26-19.jpg",
        "user_cover_photo": "http://localhost:8001/media/cover_photos/2017-04-26-191519.jpg",
        "user_profession": {
          "name": "Musician",
          "id": 8
        },
        "user_profession_text": "Musician",
        "image_url": "",
        "video_url": "http://localhost:8001/media/post_videos/VID_20170721_15.mp4",
        "video_thumb_url": "http://localhost:8001/media/post_video_thumbnails/VID_20170721_15.jpg",
        "topics": [
          "legendofzelda"
        ],
        "topic": "legendofzelda",
        "created_on": "2017-08-02T07:28:33.096Z",
        "is_liked": false,
        "likes_url": "http://localhost:8000/api/v4/posts/94/likes/",
        "resolution": null,
        "score": 3.5292764,
        "id": "94",
        "mentioned_users": [91, 102],
        "geo_location_lat": 28.704059,
        "geo_location_lng": 77.102490,
        "link": "",
        "link_meta_data": {},
        "pdf_url": "",
        "pdf_thumb_url": "",
        "audio_url": "",
        "audio_thumb_url": "",
        "post_thumbnail_url": "http://localhost:8001/media/post_images/image.jpg",
        "media_files": [
            {
                "type": "image",
                "url": "https://mw-media-dev-1.s3.aws.amazonaws.com/post_images/f854530a-159c-11e8-95e1-dbbf80fcfda1.jpg"
            }
        ],
      }
    ]
  }

..  list-table:: Fields
    :header-rows: 1

    * - Fieldname
      - Description
      - Type
    * - next
      - Url to go to the next result set before this. Used for backwards compatibility. Use backwards instead.
      - url
    * - previous
      - Url to go to the next result set after this. Used for backwards compatibility. Use forwards instead.
      - url
    * - count
      - The number of items total before this result. Can be used to check if result is
        empty for forward navigation.
      - integer
    * - results
      - Array of results according to the searched fields.
      - array
    * - results.id
      - The ID of the Post.
      - integer
    * - results.user_id
      - The ID of the user who posted the Post.
      - integer
    * - post_type
      - Post type of a post.
      - string 
    * - num_likes
      - The number of likes that this post has received.
      - integer
    * - num_comments
      - The number of comments that this post has received.
      - integer
    * - interest_id
      - The ID of the interest that this post belongs to.
      - integer
    * - user_firstname
      - The user's first name.
      - string
    * - user_lastname
      - The user's last name.
      - string
    * - results.user_profile_photo
      - URL of the user's profile photo.
      - url
    * - results.user_profile_photo_thumbnail
      - URL of the user's profile photo's thumbnail.
      - url
    * - results.user_cover_photo
      - URL of the user's cover photo.
      - url
    * - results.user_profession
      - Object representing some information about user's profession.
      - object
    * - results.user_profession.name
      - Description of the user's profession.
      - string
    * - results.user_profession.id
      - ID of the user's profession.
      - integer
    * - results.user_profession_text
      - Description of the user's profession.
      - string
    * - image_url
      - Post image's URL.
      - url
    * - video_url
      - Post video's URL.
      - url
    * - video_thumb_url
      - Post video's thumbnail URL.
      - url
    * - topics
      - An array of topic texts.
      - array(string)
    * - created_on
      - The time at which the post was created.
      - datetime (ISO 8601)
    * - is_liked
      - Boolean indicated if the post is liked by the currently logged in user.
      - bool
    * - likes_url
      - URL to get the users who liked the post.
      - url
    * - resolution
      - Object representing the resolution of the image or video.
      - object
    * - resolution.width
      - The width of the video/image.
      - integer
    * - resolution.height
      - The height of the video/image.
      - integer
    * - score
      - The score for the post as calculated by elasticsearch, indicated the relevance of the result.
      - float
    * - tags
      - An array of tag names.
      - array(string)
    * - mentioned_users
      - An array of `user_id` who are mentioned in the post.
      - array(values)
    * - geo_location_lat
      - Geo location latitude.
      - Decimal value
    * - geo_location_lng
      - Geo location longitude.
      - Decimal value
    * - audio_url
      - Post audio's URL.
      - url
    * - audio_thumb_url
      - Post audio's thumbnail URL.
      - url
    * - pdf_url
      - Post pdf's URL.
      - url
    * - pdf_thumb_url
      - Post pdf's thumbnail URL.
      - url
    * - link
      - Link type post link URL.
      - url
    * - link_meta_data
      - Object representing meta data of link in a Post.
      - object
    * - link_meta_data.title
      - Title of the link shared in a Post.
      - string
    * - link_meta_data.description
      - Description of the link shared in a Post.
      - string
    * - link_meta_data.image
      - URL of image thumbnail of the link shared in a Post.
      - url
    * - post_thumbnail_url
      - The thumbnail URL based on what type of post it is. i.e. If post is an image post it will
        the image thumbnail.
      - url
    * - media_files
      - An array of media files objects.
      - array
    * - media_files.type
      - The file type.
      - string
    * - media_files.url
      - The URL of the file.
      - url

Pagination
----------

This API uses time based pagination. When you make a request to the URL without pagination parameters, it will return
the result based on current time, and include fields `forward` and `backward` for going forward and backward in time in
relation to the current result.

If the user scrolls down, make a request to the backwards url to get results from the past.
If the user scrolls up (pull to refresh), make a request to the forwards url to get results from the future (relative
to the time of the request).

Client should maintain the latest `forward` and `backward` url. When the user goes forwards, update the `foward`
url. When the client goes backwards, update the `backward` url. Do not update `forward` url when user goes backwards,
and don't update `backward` url when user goes forwards.

Long polling
------------

You can keep calling the `forward` url at short intervals (eg. 5 sec) to see if there is any new content. If there are
any results, you can inform the user of new content (similar to facebook or twitter). While doing the polling, keep 
updating the `forward` url with the new url, even if the results were empty.


Create Post
===========

This lets user to create a new post.

Request Payload
---------------

.. code-block:: http

   POST api/v1.1/user/<user_id>/posts/ HTTP/1.1
   Host: api.meanwise.com
   Accept: application/json
   Content-Type: application/json
   Authorization: Token {token}

Query Parameters
----------------

..  list-table::
    :header-rows: 1

    * - Fieldname
      - Description
    * - user_id
      - The user_id of the user.
 
Request Body
-----------------------

.. code-block:: javascript

  {
    "text": "Test post @username",
    "interest": 1,
    "tags": ["ttag1", "ttag3"],
    "topics": ["testtopic"],
    "image": "@/home/Pictures/mobile/IMG_20140310_195139094.jpg",
    "mentioned_users": [3],
    "geo_location_lat": 28.704059,
    "geo_location_lng": 77.102490
  }


..  list-table:: Fields
    :header-rows: 1

    * - Fieldname
      - Description
      - Type
    * - text
      - Text of the post.
      - text
    * - interest
      - The id of the Interest that the post belongs to.
      - Integer
    * - image
      - Image file.
      - .jpg, .png
    * - video
      - Video file.
      - video file type
    * - topics
      - An array of topic texts.
      - array(string)
    * - resolution
      - Object representing the resolution of the image or video.
      - object
    * - resolution.width
      - The width of the video/image.
      - integer
    * - resolution.height
      - The height of the video/image.
      - integer
    * - tags
      - An array of tag names.
      - array(string)
    * - mentioned_users
      - An array of `user_id` who are mentioned in the post.
      - array(values)
    * - geo_location_lat
      - Geo location latitude.
      - Decimal value
    * - geo_location_lng
      - Geo location longitude.
      - Decimal value
    * - post_type
      - The type of the post. Allowed types are: image, video, text, audio, pdf, link.
      - string
    * - pdf
      - The PDF file.
      - file
    * - pdf_thumbnail
      - An image to show as the PDF thumbnail.
      - image
    * - audio
      - The Audio file.
      - file
    * - audio_thumbnail
      - An image to show as the Audio thumbnail.
      - image
    * - link
      - The URL that will be linked to.
      - url
    * - link_meta_data
      - Additional data about the link that will be used to display the link in app.
      - object
    * - link_meta_data.title
      - Title of the link shared in a Post.
      - string
    * - link_meta_data.description
      - Description of the link shared in a Post.
      - string
    * - link_meta_data.image
      - URL of image thumbnail of the link shared in a Post.
      - url

Response Payload (JSON)
-----------------------

.. code-block:: http

  HTTP/1.1 201 Created
  Content-Type: application/json

.. code-block:: javascript

  {
    "status": "success",
    "error": "",
    "results": {
      "id": 78,
      "tags": ["ttag1", "ttag3"],
      "topics": ["testtopic"],
      "geo_location_lat": "28.704059",
      "geo_location_lng": "77.102490",
      "image": null,
      "video": null,
      "text": "test data @username",
      "is_deleted": false,
      "video_height": null,
      "video_width": null,
      "video_thumbnail": null,
      "resolution": null,
      "story_index": null,
      "created_on": "2017-08-07T18:29:10.592541Z",
      "modified_on": "2017-08-07T18:29:10.592568Z",
      "interest": 1,
      "poster": 1,
      "parent": null,
      "story": null,
      "liked_by": []
      "mentioned_users": [
          3
      ]
    }
  }


Create Post New
===============

New API for creating posts. The upload of files (image, video) has been separated. Refer to media
API for details on how to upload files. The UUID for the files have to be added into the media_url
field. Optionally, a thumbnail image can be generated for the post, and added to the thumbnail
field. Previously used separate media fields; image, video, pdf, audio, has been removed.

topics and topic_names field has been removed, and replaced with ``topic`` field.

Request Payload
---------------

.. code-block:: http

   PUT api/v2.0/posts/<post_id> HTTP/1.1
   Host: api.meanwise.com
   Accept: application/json
   Content-Type: application/json
   Authorization: Token {token}

Request Body
------------

.. code-block:: javascript

  {
    "post_uuid": "79fd46d6-1562-11e8-95b5-f79db724f160",
    "text": "Test post @username",
    "interest": 1,
    "tags": ["ttag1", "ttag3"],
    "topic": "testtopic",
    "mentioned_users": [3],
    "geo_location_lat": 28.704059,
    "geo_location_lng": 77.102490
    "media_ids": [
        {
            "media_id": "post_images/89ed1954-1562-11e8-abe3-3b7e2dc10600.jpg",
            "type": "image"
        }
    ],
    "post_type": "image",
    "thumbnail": ["post_thumbnails/abe882b4-1562-11e8-8602-b7285e2b2797.jpg"]
  }


..  list-table:: Fields
    :header-rows: 1

    * - Fieldname
      - Description
      - Type
    * - post_uuid
      - UUID generated on the front-end to ensure idempotency of the operation.
      - uuid
    * - text
      - Text of the post.
      - text
    * - interest
      - The id of the Interest that the post belongs to.
      - Integer
    * - topic
      - The topic for this post.
      - array(string)
    * - resolution
      - Object representing the resolution of the image or video.
      - object
    * - resolution.width
      - The width of the video/image.
      - integer
    * - resolution.height
      - The height of the video/image.
      - integer
    * - tags
      - An array of tag names.
      - array(string)
    * - mentioned_users
      - An array of `user_id` who are mentioned in the post.
      - array(values)
    * - geo_location_lat
      - Geo location latitude.
      - Decimal value
    * - geo_location_lng
      - Geo location longitude.
      - Decimal value
    * - post_type
      - The type of the post. Allowed types are: image, video, text, audio, pdf, link.
      - string
    * - link
      - The URL that will be linked to.
      - url
    * - link_meta_data
      - Additional data about the link that will be used to display the link in app.
      - object
    * - link_meta_data.title
      - Title of the link shared in a Post.
      - string
    * - link_meta_data.description
      - Description of the link shared in a Post.
      - string
    * - link_meta_data.image
      - URL of image thumbnail of the link shared in a Post.
      - url
    * - media_ids
      - Array of media_id objects.
      - array
    * - media_ids.media_id
      - A :ref:`Media IDs<media-id>`. The media should match the media type (i.e. If media type is video, then the media should be a video file.
      - media id
    * - media_ids.type
      - The type of media: image, video, pdf, audio.
      - string
    * - thumbnail
      - A :ref:`media-id` that contains a thumbnail image that represents the post. Eg: ``/post_thumbnails/60db3238-1596-11e8-89bf-bf1ac5f21e9f.jpg``
      - media id

Paths for the media
~~~~~~~~~~~~~~~~~~~

For uploading the post media through the Media API, use the below paths based on the post type.

..  list-table:: paths
    :header-rows: 1

    * - Type
      - Path
    * - image
      - post_images
    * - video
      - post_videos
    * - pdf
      - post_pdf
    * - audio
      - post_audio
    * - thumbnail
      - post_thumbnails

Response Payload (JSON)
-----------------------

.. code-block:: http

  HTTP/1.1 201 Created
  Content-Type: application/json
  Location: /api/v2.0/posts/<post_id>/status/


Check Post status
=================

Request Payload
---------------

.. code-block:: http

   POST api/v2.0/posts/<post_id>/status/ HTTP/1.1
   Host: api.meanwise.com
   Accept: application/json
   Authorization: Token {token}

Response Payload (JSON)
-----------------------

.. code-block:: http

  HTTP/1.1 200 OK
  Content-Type: application/json

.. code-block:: javascript

  {
    "status": "success",
    "error": "",
    "results": {
      "status": "pending",
      "location": "http://localhost:8000/api/v4/posts/<post_id>/status/"
    }
  }

..  list-table:: paths
    :header-rows: 1

    * - Field
      - Description
      - Type
    * - status
      - Status of the post processing. Either; pending, completed or error.
      - string
    * - location
      - The location of the post, when it is ready.
      - url
    * - error_message
      - Details of the error when something goes wrong while creating the post.
      - string

If the processing status is 'pending' then try again in a second (or more). If the status is
completed, then you can consider the post created. The post will appear in other API output (eg.
explore, portfolio, etc). If the status is 'error' then you will need to fix the issue that's
mentioned in the error message.

Comment
=======

This lets user to add a comment to a post and also mention other user in the comment. If a user is mentioned then a notification to that user will also be sent.

Request Payload
---------------

.. code-block:: http

   POST api/v1.1/posts/<post_id>/comments/ HTTP/1.1
   Host: api.meanwise.com
   Accept: application/json
   Content-Type: application/json
   Authorization: Token {token}

Query Parameters
----------------

..  list-table::
    :header-rows: 1

    * - Fieldname
      - Description
    * - post_id
      - The id of the post.


Request Body
------------

.. code-block:: javascript

  {
    "comment_text": "test comment @username",
    "commented_by": 1,
    "mentioned_users": [2]
  }


..  list-table:: Fields
    :header-rows: 1

    * - Fieldname
      - Description
      - Type
    * - comment_text
      - Text of the comment.
      - text
    * - commented_by
      - `user_id` of user who is commenting on the post.
      - Integer
    * - mentioned_users
      - An array of `user_id` who are mentioned in the post.
      - array(values)


Response Payload (JSON)
-----------------------

.. code-block:: http

  HTTP/1.1 201 Created
  Content-Type: application/json

.. code-block:: javascript

 {
   "status": "success",
   "error": "",
   "results": {
     "id": 32,
     "comment_text": "test comment @username",
     "is_deleted": false,
     "created_on": "2017-08-07T18:49:38.404246Z",
     "modified_on": "2017-08-07T18:49:38.404290Z",
     "post": 76,
     "commented_by": 1,
     "mentioned_users": [
        1
     ]
   }
 }

Post Update
===========

Request Payload
---------------

.. code-block:: http

   POST api/v1.1/posts/<post_id>/ HTTP/1.1
   Host: api.meanwise.com
   Accept: application/json
   Content-Type: application/json
   Authorization: Token {token}

Request Body
------------

.. code-block:: javascript

  {
    "is_work": true
  }


..  list-table:: Fields
    :header-rows: 1

    * - Fieldname
      - Description
      - Type
    * - is_work
      - Specified whether the post is for work or inspiration.
      - boolean

Response
--------

.. code-block:: http

  HTTP/1.1 200 OK
  Content-Type: application/json

.. code-block:: javascript

  {
    "status": "success",
    "error": null,
    "results": {
      "message": "Post was succesfully updated."
    }
  }
